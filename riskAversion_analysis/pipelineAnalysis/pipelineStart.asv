%%% RISK AVERSION ANALYSIS PIPELINE:
%%%%%% concatenate relevant data into a single structure 
%%%%%%% 4 behavioural dataOut for each participants 
%%%%%%%%%%%%% 4 .edf files per block 

clear all 
close all 

base_path = ['C:\Users\jf22662\OneDrive - University of Bristol\Documents\GitHub\riskAversion_analysis\riskAversion_analysis\data\'];
cd(base_path);

% select job to run 

process_behav = 0;
process_eyelink = 1;

ptIdx = [{'001'}, {'004'}];

if process_behav

% possible stimulus combinations 
 stimCombos = [1 3; 1 4; 2 3; 2 4;,...  %% different [1 2 3 4]
              1 2;,...                 %% both low [5]
              3 4;,...                  %% both high  [6]
              3 1; 4 1; 3 2; 4 2;,...  %% different [7 8 9 10]
              2 1;,...                 %% both low [11]
              4 3];                   %% both high  [12]

for isubject = 1: length(ptIdx)

    cd([ptIdx{isubject} '\']);
    if ~exist([base_path ptIdx{isubject} '\processed_data\'])
        mkdir([base_path ptIdx{isubject} '\processed_data\']);
        
    end
    
    cd([base_path ptIdx{isubject} '\processed_data\']);
    saveDataFilename = ['fullSession_' ptIdx{isubject} '.mat'];

    if ~exist(saveDataFilename)

         [allData] = preprocess_behavData(ptIdx{isubject});
         save(saveDataFilename, 'allData');

    else 
        
        load(saveDataFilename, 'allData');
       
        figSavename = [ptIdx{isubject} '_behaviouralOverview'];

        if exist("figSavename")

            plot_behavData(ptIdx{isubject}, allData, figSavename)

        end
    end
end
end

if process_eyelink

    ft_defaults;

for isubject = 1: length(ptIdx)
    cd([ptIdx{isubject} '\']);
    if ~exist([base_path ptIdx{isubject} '\processed_data\'])
        mkdir([base_path ptIdx{isubject} '\processed_data\']);
        
    end
    
    for iblock = 1:4

        cd([base_path ptIdx{isubject}]);
        tmpFilename = ['P' ptIdx{isubject} 'BLK' num2str(iblock) '.asc'];

        % read in the asc EyeLink file
        asc = read_eyelink_ascNK_AU(tmpFilename);
        
        % create events and data structure, parse asc
        [data, event, blinksmp, saccsmp] = asc2dat(asc);

        eyedata = table();
        
        plotMe = true;
        newpupil = blink_interpolate(data, blinksmp, plotMe);
        data.trial{1}(find(strcmp(data.label, 'EyePupil')==1),:) = newpupil;

        eyedata.time = data.time{1}';
        eyedata.pupilSize = data.trial{1}(3, :)';

        [trl] = riskAversion_trialfun(event);

        

        for itrial = 1: length(trl)
            fullData = [];
            tmpEncodes = trl(itrial).encodes;

            for icodes = 2: length(tmpEncodes)-1 %loop over the trial epochs
                  tmpData = [];  
%                 if tmpEncodes(icodes, 1) == 40   %ITI, 1.5s
%                     
%                 elseif tmpEncodes(icodes, 1) == 10  %fix onset, 0.5s
% 
%                 elseif tmpEncodes(icodes, 1) == 14  %stim on wait, 0.8s
% 
%                 elseif tmpEncodes(icodes, 1) == 15   %stim on, go
% 
%                 elseif tmpEncodes(icodes, 1) == 25   %response 
% 
%                 elseif tmpEncodes(icodes, 1) == 26   %delay, 0.8s
% 
%                 elseif tmpEncodes(icodes, 1) == 31   %arrow on, 0.8s
% 
%                 elseif tmpEncodes(icodes, 1) == 30   %reward on, 1.5s
% 
%                 elseif tmpEncodes(icodes, 1) == 32   %cumulative reward on, 1.5s
% 
%                 end

                  tmpData(1, :) = data.trial{1}(3, (trl(itrial).encodes(icodes, 2): trl(itrial).encodes(icodes+1, 2)));
                  tmpData(2, :) = data.time{1}(1, (trl(itrial).encodes(icodes, 2): trl(itrial).encodes(icodes+1, 2)));

                  for idx = 1: length(trl(itrial).encodes(icodes, 2): trl(itrial).encodes(icodes+1, 2))

                        tmpData(3, idx) = trl(itrial).encodes(icodes,1);
                  end

                  fullData = [fullData tmpData];

            end

            trl(itrial).data = fullData;
        end
    end
end
end



