function plot_populationBehaviour(base_path, ptIdx, figSavename)

   
    popFilename = ['populationBehav.mat'];
    cd([base_path]);
    load(popFilename);
    allData = concatData;

    bin = [1:24:120];
    binSize = 24;
   
    figure(1);
    f = gcf;
    f.Units = 'centimeters';
    f.Position = [0.0423 5.6938 40.5342 14.4410];

    hb = subplot(1, 3, 2);
    hold on 

    diff_blk_idx        = find([allData.cnd_idx] == 1);
    tmpDiffBlk          = allData(diff_blk_idx, :);
    high_choice_diff    = find(tmpDiffBlk.stimulus_choice == 3 | tmpDiffBlk.stimulus_choice ==4);
    prop_diff_high      = size(high_choice_diff, 1)./size(tmpDiffBlk, 1);

    stats_table_binnedAccuracy = [];
    stats_table_timeBinned_risk = [];
       
    for blockType = 1:2
        

        for isubject = 1: length(ptIdx)
            
            subIdx = find(allData.pt_number == str2num(ptIdx{isubject}));
            subData = allData(subIdx, :);
            
                if blockType == 1
                    col2plot = 'r'; %gaussian
                    x2plot = [1:2];
                elseif blockType == 2
                    col2plot = 'b'; %bimodal
                    x2plot = [3:4];
                end
        
                blockIdx = find(subData.distType == blockType);
                tmpBlockData = subData(blockIdx, :);
                
                % risk preferences across both-high and both-low for all trials
             
                high_idx_blk    = (tmpBlockData.cnd_idx == 3);
                low_idx_blk     = (tmpBlockData.cnd_idx == 2);
            
                % risky choice selection in both-high
                high_high_blk = find(tmpBlockData.stimulus_choice(high_idx_blk) == 4);
                % risky choice selection in both-low
                high_low_blk = find(tmpBlockData.stimulus_choice(low_idx_blk) == 2);
        
                prop_risk_high_blk{blockType}(isubject)   = length(high_high_blk)/sum(high_idx_blk==1);
                prop_risk_low_blk{blockType}(isubject)    = length(high_low_blk)/sum(low_idx_blk==1);
    
                axes(hb)
                hold on 
                plot(prop_risk_high_blk{blockType}(isubject), prop_risk_low_blk{blockType}(isubject), '.', 'color',...
                    col2plot, 'MarkerSize', 30);

            for ibin = 1: length(bin)
    
                tmpBinIdx = find(ismember(tmpBlockData.trialNum, (bin(ibin): (bin(ibin) + binSize -1))));
        
                % return condition indices of the binned trials
                % random condition selection ordering will deliver different number
                % of conditions per bin??
                diffCnd_idx = (tmpBlockData.cnd_idx(tmpBinIdx) == 1);
                high_idx    = (tmpBlockData.cnd_idx(tmpBinIdx) == 3);
                low_idx     = (tmpBlockData.cnd_idx(tmpBinIdx) == 2);
        
                high_diff = find(tmpBlockData.stimulus_choice(tmpBinIdx(diffCnd_idx)) == 3 ...
                    | tmpBlockData.stimulus_choice(tmpBinIdx(diffCnd_idx)) == 4);
        
                high_high = find(tmpBlockData.stimulus_choice(tmpBinIdx(high_idx)) == 2 ...
                    | tmpBlockData.stimulus_choice(tmpBinIdx(high_idx)) == 4);
        
                high_low = find(tmpBlockData.stimulus_choice(tmpBinIdx(low_idx)) == 2 ...
                    | tmpBlockData.stimulus_choice(tmpBinIdx(low_idx)) == 4);
        
                prop_accuracy{blockType}(isubject, ibin)     = length(high_diff)/sum(diffCnd_idx == 1);
                prop_risk_high{blockType}(isubject, ibin)    = length(high_high)/sum(high_idx==1);
                prop_risk_low{blockType}(isubject, ibin)     = length(high_low)/sum(low_idx==1);

                tmpStats = [isubject, blockType, ibin, prop_risk_high{blockType}(isubject, ibin), prop_risk_low{blockType}(isubject, ibin)];
                stats_table_timeBinned_risk = [stats_table_timeBinned_risk; tmpStats];

            end
        end

        mean_risk_high = mean(prop_risk_high_blk{blockType});
        sem_risk_high  = std(prop_risk_high_blk{blockType})./sqrt(length(prop_risk_high_blk{blockType}));
        mean_risk_low = mean(prop_risk_low_blk{blockType});
        sem_risk_low  = std(prop_risk_low_blk{blockType})./sqrt(length(prop_risk_low_blk{blockType}));

        mean_binned_accuracy{blockType} = mean(prop_accuracy{blockType});
        sem_binned_accuracy{blockType}  = std(prop_accuracy{blockType})./sqrt(length(prop_accuracy{blockType}));

        mean_binned_high{blockType}     = mean(prop_risk_high{blockType});
        sem_binned_high{blockType}  = std(prop_risk_high{blockType})./sqrt(length(prop_risk_high{blockType}));

        mean_binned_low{blockType}     = mean(prop_risk_low{blockType});
        sem_binned_low{blockType}  = std(prop_risk_low{blockType})./sqrt(length(prop_risk_low{blockType}));

        ht = subplot(1, 3, 1) %choice accuracy - over trials
        errorbar(mean_binned_accuracy{blockType}, sem_binned_accuracy{blockType}, 'color', col2plot, 'linew', 1.5);
        hold on
        xlabel('Trials (Binned)');
        ylabel('P(High|Different)');
        title('Choice Accuracy');

        % test sign from chance for participants performance
        for ibin = 1:5

            [h,p{blockType}(ibin), ~ ,stats{blockType}{ibin}] = ttest(prop_accuracy{blockType}(:, ibin));

            tmpStats = [blockType stats{blockType}{ibin}.tstat, stats{blockType}{ibin}.df, p{blockType}(ibin)];

            stats_table_binnedAccuracy = [stats_table_binnedAccuracy; tmpStats]
           
        end
        hh = subplot('Position', [0.7, 0.11, 0.125, 0.81]);
        errorbar(mean_binned_high{blockType}, sem_binned_high{blockType}, 'color', col2plot, 'linew', 1.5);
        hold on
        xlabel('Trials (Binned)');
        ylabel('P(Risky|Both-High)');

        hl = subplot('Position', [0.87 0.11 0.125 0.81]);
        errorbar(mean_binned_low{blockType}, sem_binned_low{blockType}, 'color', col2plot, 'linew', 1.5);
        hold on
        alpha(0.25);
        xlabel('Trials (Binned)');
        ylabel('P(Risky|Both-Low)');


         % stats: participants more risk seeking for low or high means 
        [~, p_risk(blockType), ~, stats_risk{blockType}] = ttest(prop_risk_high_blk{blockType}, prop_risk_low_blk{blockType});
       

    end

    table2export_1 = array2table(stats_table_binnedAccuracy, 'VariableNames', {'blockType', 'tStat', 'df', 'pValue'});

    stat_accuracyComp = [];
    %stats comparison between means for each distribution over time 
    for ibin = 1:5

        [~, p_type(ibin), ~, stats_type{ibin}] = ttest(prop_accuracy{1}(:, ibin), prop_accuracy{2}(:, ibin));
        tmpStats = [stats_type{ibin}.tstat, stats_type{ibin}.df, p_type(ibin)];
        stat_accuracyComp = [stat_accuracyComp; tmpStats]

    end

    table2export_2 = array2table(stat_accuracyComp, 'VariableNames', {'tStat', 'df', 'pValue'});

    table2export_3 = array2table(stats_table_timeBinned_risk, 'VariableNames', {'subIdx',...
        'distType', 'binNumber', 'risk_high', 'risk_low'});

%     table2export_3.distType = categorical(table2export_3.distType);
    high_glme = fitglme(table2export_3, 'risk_high ~ distType * binNumber + (1|subIdx)', 'DummyVarCoding', 'Effects');
    low_glme = fitglme(table2export_3, 'risk_low ~ distType * binNumber + (1|subIdx)', 'DummyVarCoding', 'Effects');
    an_high = anova(high_glme);
    an_low  = anova(low_glme);


        axes(hb);
        set(hb, 'FontName', 'times');
        xlim([0 1]);
        ylim([0 1]);
        xlabel('P(Risky|Both-High)');
        ylabel('P(Risky|Both-Low)');
        x2plot = linspace(0, 1);
        y2plot = linspace(0, 1);
        hold on 
        plot(x2plot, y2plot, 'k-');
        
       
        axes(ht);
        set(ht, 'FontName', 'times');
        hold on
%         plot([1:5], prop_accuracy, col2plot, 'LineWidth', 1.2);
        ylim([0 1]);
        xlim([0 6]);
        axes(hh);
        set(hh, 'FontName', 'times');
        hold on
%         plot([1:5], prop_risk_high, col2plot, 'LineWidth', 1.2);
        ylim([0 1]);
        xlim([0 6]);
        title('P(Risky|Both-High): Binned Trials');
        axes(hl)
        set(hl, 'FontName', 'times');
%         plot([1:5], prop_risk_low, col2plot, 'LineWidth', 1.2);
        ylim([0 1]);
        xlim([0 6]);
        title('P(Risky|Both-Low): Binned Trials');


        axes(hb);
        gcf;
        print(figSavename, '-dpng');

end
